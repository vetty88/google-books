{"version":3,"sources":["services/logService.js","services/httpService.js","utils/API.js","components/Jumbotron/index.js","components/Grid/index.js","components/SavedResult/index.js","pages/SaveBooks.js","components/SearchForm/index.js","components/SearchResult/index.js","pages/SearchBooks.js","pages/NoMatch.js","components/Nav/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["init","Sentry","dsn","log","error","console","axios","interceptors","response","use","status","logger","toast","Promise","reject","get","post","put","delete","getGoogleSearchBooks","q","http","params","getBooks","getBook","id","deleteBook","saveBook","catch","Jumbotron","children","className","Container","fluid","Row","Col","size","split","map","join","SavedResult","props","savedBooks","length","savedBook","title","src","image","alt","authors","description","_id","onClick","handleDeleteButton","href","link","target","SaveBook","state","API","res","componentDidMount","err","setState","data","this","Component","SearchForm","value","search","type","name","placeholder","onChange","handleInputChange","handleFormSubmit","SearchResult","books","book","author","event","handleSavedButton","SearchBooks","message","preventDefault","items","Error","results","result","key","volumeInfo","imageLinks","thumbnail","infoLink","filter","alert","NoMatch","role","aria-label","Nav","Footer","App","exact","path","component","SaveBooks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f85a75e7.chunk.js","sourcesContent":["import * as Sentry from \"@sentry/browser\";\r\n\r\nfunction init() {\r\n  Sentry.init({\r\n    dsn: \"https://c060a25040344214b50b022db61e7ef5@sentry.io/1375248\"\r\n  });\r\n}\r\n\r\nfunction log(error) {\r\n  Sentry.captureException(error);\r\n  console.log(error);\r\n}\r\n\r\n// Interface of logService has two methods -- init and log\r\nexport default {\r\n  init,\r\n  log\r\n};","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport logger from \"./logService\";\r\n\r\n// Whenever we have an response with an error, this function will be called first and then the controller will pass to a catch block\r\naxios.interceptors.response.use(null, error => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status < 500;\r\n\r\n  if (!expectedError) {\r\n    // Unexpected (network down, server down, database down, bug)\r\n    // - Log them\r\n    // - Display a generic and friendly error message\r\n    logger.log(error);\r\n    toast.error(\"An unexpected error occured.\");\r\n  }\r\n\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete\r\n};","\r\nimport http from \"../services/httpService\";\r\n\r\nexport default {\r\n    // Get book from google search \r\n  getGoogleSearchBooks: function(q) {\r\n    return http.get(\"/api/google\", {\r\n      params: { q: \"title:\" + q }\r\n    });\r\n  },\r\n  // Gets all books\r\n  getSavedBooks: function() {\r\n    return http.get(\"/api//books\");\r\n  },\r\n  // Gets the book with the given id\r\n  getBook: function(id) {\r\n    return http.get('/api/books/' + id);\r\n  },\r\n  // Deletes the book with the given id\r\n  deleteBook: function(id) {\r\n    return http.delete('/api/books/' + id);\r\n  },\r\n  // Saves a book to the database\r\n  saveBook: function(savedBooks) {\r\n    return http.post('/api/books', savedBooks);\r\n  }\r\n  (response => { \r\n    console.log(response)\r\n  })\r\n  .catch(error => {\r\n      console.log(error.response)\r\n  })\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron({ children }) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid d-flex align-items-center\">\r\n            <div className=\"container text-center\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Row component lets us use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Col component lets us size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"col-\" + size)\r\n        .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\nimport {Row, Col} from \"../Grid\";\r\n\r\nconst SavedResult = props => {\r\n    return (props.savedBooks.length === 0) ? (\r\n        <div className=\"card\">\r\n            <div className=\"card-body player\">\r\n                <div className=\"article\">\r\n                    <h3>Books that You Saved</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ):(\r\n        <div className=\"card\">\r\n            <div className=\"card-body player\">\r\n                <div className=\"article\">\r\n                    <h3>Books that You Saved</h3>\r\n                    {props.savedBooks.map(savedBook => {\r\n                        return (\r\n                            <li className=\"saved-list list-group-item\">\r\n                                <Row className=\"SearchResult\" id={savedBook.title + \"Card\"} key={savedBook._id}>\r\n                                    {/* col-3 show image of the book */}\r\n                                    <Col size=\"2\" className=\"bookImage\">\r\n                                        <img src={savedBook.image} alt={savedBook.title} />\r\n                                    </Col>\r\n                                    <Col size=\"1\" className=\"emptyCol\"/>\r\n                                    {/* col-9 show information of the book */}\r\n                                    <Col size=\"9\" className=\"bookInfo\">\r\n                                        <Row>\r\n                                            <h2 className=\"bookTitle\">{savedBook.title}</h2>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <h3 className=\"bookAuthor\">{savedBook.authors}</h3>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <p className=\"bookDescription\">{savedBook.description}</p>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                                <br></br>\r\n                                <Row className=\"buttonDiv \">\r\n                                    <button className=\"deleteBook btn btn-danger\" id={savedBook._id} onClick={() => props.handleDeleteButton(savedBook._id)}>\r\n                                        Delete Book\r\n                                    </button>\r\n                                    <a href={savedBook.link} target=\"example\">\r\n                                        <button className=\"viewBook btn btn-success\">\r\n                                            View Book\r\n                                        </button>\r\n                                    </a>\r\n                                </Row>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SavedResult","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport { Container} from \"../components/Grid\";\r\nimport SavedResult from \"../components/SavedResult\";\r\n\r\nclass SaveBook extends Component {\r\n    state = {\r\n        savedBooks: []\r\n    };\r\n\r\n    //when this component mounts, grab all books that were save to the database \r\n    componentDidMount() {\r\n        API.getBooks()\r\n            (res => this.setState({ savedBooks: res.data }))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    //function to remove book by _id\r\n    handleDeleteButton = _id => {\r\n        API.deleteBook(_id)\r\n            (res => this.componentDidMount())\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid className=\"container\">\r\n                <Jumbotron />\r\n                <Container>\r\n                    <SavedResult savedBooks={this.state.savedBooks} handleDeleteButton={this.handleDeleteButton} />\r\n                </Container>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SaveBook ","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst SearchForm = props => {\r\n    return (\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <label className=\"BookSearchLabel\"><h3>Search For Book</h3></label>\r\n                <br></br>\r\n                <input className=\"col-12 form-control\"\r\n                    value={props.search}\r\n                    type=\"text\"\r\n                    name=\"searchBook\"\r\n                    placeholder=\"Enter Book's Name\"\r\n                    onChange={props.handleInputChange}\r\n                />\r\n            </div>\r\n            <button type=\"submit\" className=\"submitBtn btn btn-primary\" onClick={props.handleFormSubmit}>\r\n                Submit\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default SearchForm","import React from \"react\";\r\nimport \"./style.css\";\r\nimport {Row, Col} from \"../Grid\"\r\n\r\nconst SearchResult = props => {\r\n    return (props.books.length === 0) ? (\r\n        <div className=\"card\">\r\n            <div className=\"card-body player\">\r\n                <div className=\"article\">\r\n                    <h3>Search Results</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ) : (\r\n            <div className=\"card\">\r\n                <div className=\"card-body player\">\r\n                    <div className=\"article\">\r\n                        <h3>Search Results</h3>\r\n                        {props.books.map(book => {\r\n                            return (\r\n                                <li className=\"search-list list-group-item\">\r\n                                    <Row className=\"SearchResult row\" _id={book.title + \"Card\"} key={book._id}>\r\n                                        {/* col-3 show image of the book */}\r\n                                        <Col size=\"2\" className=\"bookImage\">\r\n                                            <img src={book.image} alt={book.title} />\r\n                                        </Col>\r\n                                        <Col size=\"1\" className=\"emptyCol\"/>\r\n                                        {/* col-9 show information of the book */}\r\n                                        <Col size=\"9\" className=\"bookInfo\">\r\n                                            <Row>\r\n                                                <h3 className=\"bookTitle\">{book.title}</h3>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <h4 className=\"bookAuthor\">{book.author}</h4>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <p className=\"bookDescription\">{book.description}</p>\r\n                                            </Row>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <br></br>\r\n                                    <Row className=\"buttonDiv \">\r\n                                        <button className=\"saveBook btn btn-primary\" _id={book._id} onClick={(event) => props.handleSavedButton(event)}>\r\n                                            Save Book\r\n                                        </button>\r\n                                        <a href={book.link} target=\"example\">\r\n                                            <button className=\"viewBook btn btn-success\">\r\n                                                View Book\r\n                                        </button>\r\n                                        </a>\r\n                                    </Row>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\nexport default SearchResult","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport { Container, Row, Col } from \"../components/Grid\";\r\nimport SearchForm from \"../components/SearchForm\";\r\nimport SearchResult from \"../components/SearchResult\"\r\n\r\n\r\nclass SearchBooks extends Component {\r\n    //create state\r\n    state = {\r\n        search: \"\",\r\n        books: [],\r\n        error: \"\",\r\n        message: \"\"\r\n    };\r\n\r\n    //function to take value of what enter in the search bar\r\n    handleInputChange = event => {\r\n        this.setState({ search: event.target.value })\r\n    }\r\n\r\n    //function to control the submit button of the search form \r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        // once it clicks it connects to the google book api with the search value\r\n        API.getGoogleSearchBooks(this.state.search)\r\n            (res => {\r\n                if (res.data.items === \"error\") {\r\n                    throw new Error(res.data.items);\r\n                }\r\n                else {\r\n                    // store response in a array\r\n                    let results = res.data.items\r\n                    //map through the array \r\n                    results = results.map(result => {\r\n                        //store each book information in a new object \r\n                        result = {\r\n                            key: result._id,\r\n                            _id: result._id,\r\n                            title: result.volumeInfo.title,\r\n                            author: result.volumeInfo.authors,\r\n                            description: result.volumeInfo.description,\r\n                            image: result.volumeInfo.imageLinks.thumbnail,\r\n                            link: result.volumeInfo.infoLink\r\n                        }\r\n                        return result;\r\n                    })\r\n                    // reset the sate of the empty books array to the new arrays of objects with properties geting back from the response\r\n                    this.setState({ books: results, error: \"\" })\r\n                }\r\n            })\r\n            .catch(err => this.setState({ error: err.items }));\r\n    }\r\n\r\n    handleSavedButton = event => {\r\n        // console.log(event)\r\n        event.preventDefault();\r\n        console.log(this.state.books)\r\n        let savedBooks = this.state.books.filter(book => book._id === event.target._id)\r\n        savedBooks = savedBooks[0];\r\n        API.saveBook(savedBooks)\r\n            (this.setState({ message: alert(\"Your book is saved\") }))\r\n            .catch(err => console.log(err))\r\n    }\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Jumbotron>\r\n                    <h1 className=\"text-white\">Find Your Favorite Books with GoogleBook API</h1>\r\n                </Jumbotron>\r\n                <Container>\r\n                    <Row>\r\n                        <Col size=\"12\">\r\n                            <SearchForm\r\n                                handleFormSubmit={this.handleFormSubmit}\r\n                                handleInputChange={this.handleInputChange}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <br></br>\r\n                <Container>\r\n                    <SearchResult books={this.state.books} handleSavedButton={this.handleSavedButton} />\r\n                </Container>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default SearchBooks","import React from \"react\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nfunction NoMatch() {\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col size=\"md-12\">\r\n          <Jumbotron>\r\n            <h1 className=\"text-white\">404 Page Not Found</h1>\r\n            <h1>\r\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n                🙄\r\n              </span>\r\n            </h1>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NoMatch;","import React from \"react\";\r\n\r\nfunction Nav() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-primary bg-primary\">\r\n            <a className=\"navbar-brand\" href=\"/\">\r\n                <h2 className=\"text-white\">Google book Search</h2>\r\n            </a>\r\n            <div id=\"navbarNav\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\" _id=\"home\">\r\n                        <a className=\"nav-link\" href=\"/\"><button type=\"button\" className=\"btn btn-info text-white\">Search Books</button></a>\r\n                    </li>\r\n                    <li className=\"nav-item\" _id=\"report\">\r\n                        <a className=\"nav-link\" href=\"/saved\"><button type=\"button\" className=\"btn btn-warning text-white\">Saved Books</button></a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Footer = () => (\r\n\t<footer className = \"page-footer\">\r\n\t\t<div className = \"container-fluid text-center\">\r\n\t\t\t<p>Google Books - Y Waller</p>\r\n\t\t</div>\t\r\n\t</footer>\r\n);\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport SaveBooks from \"./pages/SaveBooks\";\r\nimport SearchBooks from \"./pages/SearchBooks\";\r\nimport NoMatch from \"./pages/NoMatch\";\r\nimport Nav from \"./components/Nav\";\r\nimport Footer from \"./components/Footer\";\r\nimport \"./App.css\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Nav />\r\n        <Switch>\r\n          <Route exact path=\"*\" component={SearchBooks} />\r\n          <Route exact path=\"/saved\" component={SaveBooks} />\r\n          <Route exact path=\"/saved/:_id\" component={SaveBooks} />\r\n          <Route component={NoMatch} /> \r\n        </Switch>\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}