{"version":3,"file":"node_assert.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/node_assert.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,WAAW,EAAE,aAAa,EAAC,MAAM,UAAU,CAAC;;;;;;AAGpD,MAAM,yBAAyB,IAAW,EAAE,IAAgB;IAC1D,aAAa,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC;IACpD,WAAW,CAAC,IAAI,CAAC,KAAK,oBAAuB,EAAE,IAAI,EAAE,iBAAe,QAAQ,CAAC,IAAI,CAAG,CAAC,CAAC;CACvF;;;;;;AAED,MAAM,oCAAoC,IAAW;IAAE,eAAsB;SAAtB,UAAsB,EAAtB,qBAAsB,EAAtB,IAAsB;QAAtB,8BAAsB;;IAC3E,aAAa,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC;IACpD,qBAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,oBAAuB,CAAC;IACnD,qBAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,QAAQ,KAAK,IAAI,EAAjB,CAAiB,CAAC,CAAC;IACpD,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,sBAAoB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC;CAChF;;;;;AAED,kBAAkB,IAAgB;IAChC,EAAE,CAAC,CAAC,IAAI,sBAAyB,CAAC;QAAC,MAAM,CAAC,YAAY,CAAC;IACvD,EAAE,CAAC,CAAC,IAAI,qBAAwB,CAAC;QAAC,MAAM,CAAC,WAAW,CAAC;IACrD,EAAE,CAAC,CAAC,IAAI,gBAAmB,CAAC;QAAC,MAAM,CAAC,MAAM,CAAC;IAC3C,EAAE,CAAC,CAAC,IAAI,mBAAsB,CAAC;QAAC,MAAM,CAAC,SAAS,CAAC;IACjD,MAAM,CAAC,WAAW,CAAC;CACpB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, assertNotNull} from './assert';\nimport {LNode, LNodeFlags} from './interfaces/node';\n\nexport function assertNodeType(node: LNode, type: LNodeFlags) {\n  assertNotNull(node, 'should be called with a node');\n  assertEqual(node.flags & LNodeFlags.TYPE_MASK, type, `should be a ${typeName(type)}`);\n}\n\nexport function assertNodeOfPossibleTypes(node: LNode, ...types: LNodeFlags[]) {\n  assertNotNull(node, 'should be called with a node');\n  const nodeType = node.flags & LNodeFlags.TYPE_MASK;\n  const found = types.some(type => nodeType === type);\n  assertEqual(found, true, `Should be one of ${types.map(typeName).join(', ')}`);\n}\n\nfunction typeName(type: LNodeFlags): string {\n  if (type == LNodeFlags.Projection) return 'Projection';\n  if (type == LNodeFlags.Container) return 'Container';\n  if (type == LNodeFlags.View) return 'View';\n  if (type == LNodeFlags.Element) return 'Element';\n  return '<unknown>';\n}\n"]}