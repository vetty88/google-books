{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAWA,MAAM,sBAAsB,CAAM,EAAE,CAAM;;;IAGxC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CACzC;;;;;AAED,MAAM,oBAAoB,KAAU;IAClC,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,UAAU,CAAC;QAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC;IAC3D,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,QAAQ,CAAC;QAAC,MAAM,CAAC,KAAK,CAAC;IAC3C,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;QAAC,MAAM,CAAC,EAAE,CAAC;IAC7B,MAAM,CAAC,EAAE,GAAG,KAAK,CAAC;CACnB;;;;;;;AAQD,MAAM;IACJ,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;CACpC;;;;;;AAKD,MAAM,kBAAkB,IAAW;IACjC,qBAAM,MAAM,GAAU,EAAE,CAAC;IACzB,qBAAI,CAAC,GAAG,CAAC,CAAC;IAEV,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QACvB,qBAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtC,CAAC,GAAG,CAAC,CAAC;aACP;YAAC,IAAI,CAAC,CAAC;gBACN,CAAC,EAAE,CAAC;aACL;SACF;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,EAAE,CAAC;SACL;KACF;IAED,MAAM,CAAC,MAAM,CAAC;CACf","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n* Must use this method for CD (instead of === ) since NaN !== NaN\n*/\nexport function isDifferent(a: any, b: any): boolean {\n  // NaN is the only value that is not equal to itself so the first\n  // test checks if both a and b are not NaN\n  return !(a !== a && b !== b) && a !== b;\n}\n\nexport function stringify(value: any): string {\n  if (typeof value == 'function') return value.name || value;\n  if (typeof value == 'string') return value;\n  if (value == null) return '';\n  return '' + value;\n}\n\n/**\n *  Function that throws a \"not implemented\" error so it's clear certain\n *  behaviors/methods aren't yet ready.\n *\n * @returns Not implemented error\n */\nexport function notImplemented(): Error {\n  return new Error('NotImplemented');\n}\n\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n */\nexport function flatten(list: any[]): any[] {\n  const result: any[] = [];\n  let i = 0;\n\n  while (i < list.length) {\n    const item = list[i];\n    if (Array.isArray(item)) {\n      if (item.length > 0) {\n        list = item.concat(list.slice(i + 1));\n        i = 0;\n      } else {\n        i++;\n      }\n    } else {\n      result.push(item);\n      i++;\n    }\n  }\n\n  return result;\n}\n"]}