{"version":3,"file":"projection.js","sourceRoot":"","sources":["../../../../../../../packages/core/src/render3/interfaces/projection.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AA+CA,MAAM,CAAC,qBAAM,uBAAuB,GAAG,aAAa,CAAC;;;AAIrD,MAAM,CAAC,qBAAM,6BAA6B,GAAG,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LContainerNode, LElementNode, LTextNode} from './node';\n\n/**\n * Linked list of projected nodes (using the pNextOrParent property).\n */\nexport interface LProjection {\n  head: LElementNode|LTextNode|LContainerNode|null;\n  tail: LElementNode|LTextNode|LContainerNode|null;\n}\n\n/**\n * Parsed selector in the following format:\n * [tagName, attr1Name, attr1Val, ..., attrnName, attrnValue, 'class', className1, className2, ...,\n * classNameN]\n *\n * * For example, given the following selector:\n *  `div.foo.bar[attr1=val1][attr2]` a parsed format would be:\n * `['div', 'attr1', 'val1', 'attr2', '', 'class', 'foo', 'bar']`.\n *\n * Things to notice:\n * - tag name is always at the position 0\n * - the `class` attribute is always the last attribute in a pre-parsed array\n * - class names in a selector are at the end of an array (after the attribute with the name\n * 'class').\n */\nexport type SimpleCssSelector = string[];\n\n/**\n * A complex selector expressed as an Array where:\n * - element at index 0 is a selector (SimpleCSSSelector) to match\n * - elements at index 1..n is a selector (SimpleCSSSelector) that should NOT match\n */\nexport type CssSelectorWithNegations = [SimpleCssSelector | null, SimpleCssSelector[] | null];\n\n/**\n * A collection of complex selectors (CSSSelectorWithNegations) in a parsed form\n */\nexport type CssSelector = CssSelectorWithNegations[];\n\nexport const NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n"]}