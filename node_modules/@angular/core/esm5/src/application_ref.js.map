{"version":3,"file":"application_ref.js","sourceRoot":"","sources":["../../../../../packages/core/src/application_ref.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAC,UAAU,EAA0B,KAAK,EAAC,MAAM,MAAM,CAAC;AAC/D,OAAO,EAAC,KAAK,EAAC,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAC,YAAY,EAAC,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAC,iBAAiB,EAAE,SAAS,EAAC,MAAM,aAAa,CAAC;AACzD,OAAO,EAAC,SAAS,EAAC,MAAM,kBAAkB,CAAC;AAE3C,OAAO,EAAC,qBAAqB,EAAC,MAAM,oBAAoB,CAAC;AACzD,OAAO,EAAC,sBAAsB,EAAE,oBAAoB,EAAC,MAAM,sBAAsB,CAAC;AAClF,OAAO,EAAC,OAAO,EAAC,MAAM,WAAW,CAAC;AAClC,OAAO,EAAC,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAiB,MAAM,MAAM,CAAC;AAC1E,OAAO,EAAC,eAAe,EAAkB,MAAM,mBAAmB,CAAC;AACnE,OAAO,EAAC,gBAAgB,EAAe,MAAM,4BAA4B,CAAC;AAC1E,OAAO,EAAC,6BAA6B,EAAE,wBAAwB,EAAC,MAAM,qCAAqC,CAAC;AAC5G,OAAO,EAAuC,WAAW,EAAC,MAAM,4BAA4B,CAAC;AAE7F,OAAO,EAAa,cAAc,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AACvE,OAAO,EAAC,WAAW,EAAE,mBAAmB,EAAC,MAAM,2BAA2B,CAAC;AAE3E,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,gBAAgB,CAAC;AAElD,qBAAI,QAAQ,GAAY,IAAI,CAAC;AAC7B,qBAAI,cAAc,GAAY,KAAK,CAAC;AACpC,qBAAI,SAAsB,CAAC;AAE3B,MAAM,CAAC,qBAAM,wBAAwB,GAAG,IAAI,cAAc,CAAU,oBAAoB,CAAC,CAAC;;;;;;;;;;;;AAY1F,MAAM;IACJ,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;QACnB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;KAClE;IACD,QAAQ,GAAG,KAAK,CAAC;CAClB;;;;;;;;;;AAUD,MAAM;IACJ,cAAc,GAAG,IAAI,CAAC;IACtB,MAAM,CAAC,QAAQ,CAAC;CACjB;;;;;;AAOD;;;;;AAAA;IACE,sBAAmB,IAAY,EAAS,KAAU;QAA/B,SAAI,GAAJ,IAAI,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAK;KAAI;uBAvExD;IAwEC,CAAA;;;;;;AAFD,wBAEC;;;;;;;;;;;;;;;AAQD,MAAM,yBAAyB,QAAkB;IAC/C,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,SAAS;QACjC,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,IAAI,KAAK,CACX,+EAA+E,CAAC,CAAC;KACtF;IACD,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACtC,qBAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;IACvD,EAAE,CAAC,CAAC,KAAK,CAAC;QAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,EAAE,EAAN,CAAM,CAAC,CAAC;IAChD,MAAM,CAAC,SAAS,CAAC;CAClB;;;;;;;;;;AAOD,MAAM,gCACF,qBAAkF,EAClF,IAAY,EAAE,SAAgC;IAAhC,0BAAA,EAAA,cAAgC;IAEhD,qBAAM,IAAI,GAAG,eAAa,IAAM,CAAC;IACjC,qBAAM,MAAM,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;IACxC,MAAM,CAAC,UAAC,cAAqC;QAArC,+BAAA,EAAA,mBAAqC;QAC3C,qBAAI,QAAQ,GAAG,WAAW,EAAE,CAAC;QAC7B,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YACxE,EAAE,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBAC1B,qBAAqB,CACjB,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;aACjF;YAAC,IAAI,CAAC,CAAC;gBACN,qBAAM,iBAAiB,GACnB,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC/E,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAC,SAAS,EAAE,iBAAiB,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;aAC7E;SACF;QACD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;KAC/B,CAAC;CACH;;;;;;;;AAOD,MAAM,yBAAyB,aAAkB;IAC/C,qBAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;IAE/B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;KACxC;IAED,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAChD,MAAM,IAAI,KAAK,CACX,sFAAsF,CAAC,CAAC;KAC7F;IAED,MAAM,CAAC,QAAQ,CAAC;CACjB;;;;;;;AAOD,MAAM;IACJ,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;QACtC,SAAS,CAAC,OAAO,EAAE,CAAC;KACrB;CACF;;;;;;;AAOD,MAAM;IACJ,MAAM,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;CAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkCC,gBAAgB;IAChB,qBAAoB,SAAmB;QAAnB,cAAS,GAAT,SAAS,CAAU;wBALA,EAAE;iCACD,EAAE;0BACZ,KAAK;KAGQ;IAE3C;;;;;;;;;;;;;;;;;;;;;;OAsBG;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACH,4CAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAtB,UAA0B,aAAiC,EAAE,OAA0B;QAAvF,iBAgCC;;;;;QA1BC,qBAAM,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;QAC1D,qBAAM,MAAM,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;QACvC,qBAAM,SAAS,GAAqB,CAAC,EAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;;;QAG1E,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC;YAChB,qBAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,CAClC,EAAC,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,KAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,aAAa,CAAC,UAAU,CAAC,IAAI,EAAC,CAAC,CAAC;YACxF,qBAAM,SAAS,qBAA2B,aAAa,CAAC,MAAM,CAAC,cAAc,CAAC,CAAA,CAAC;YAC/E,qBAAM,gBAAgB,GAAiB,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAClF,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACtB,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;aAClF;YACD,SAAS,CAAC,SAAS,CAAC,cAAM,OAAA,MAAM,CAAC,KAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAhC,CAAgC,CAAC,CAAC;cAC5D,MAAM,GAAG,iBAAiB,CACtB,uBAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAC5B,EAAC,IAAI,EAAE,UAAC,KAAU,IAAO,gBAAgB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,EAAC,IAAC;YACzE,MAAM,CAAC,4BAA4B,CAAC,gBAAgB,qBAAE,MAAM,IAAI;gBAC9D,qBAAM,UAAU,GAA0B,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;gBACxF,UAAU,CAAC,eAAe,EAAE,CAAC;gBAC7B,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC;oBACjC,KAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;oBACnC,MAAM,CAAC,SAAS,CAAC;iBAClB,CAAC,CAAC;aACJ,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;IAED;;;;;;;;;;;;;;OAcG;;;;;;;;;;;;;;;;;;;;IACH,qCAAe;;;;;;;;;;;;;;;;;;;IAAf,UACI,UAAmB,EAAE,eACuB;QAFhD,iBASC;QARwB,gCAAA,EAAA,oBACuB;QAC9C,qBAAM,eAAe,GAAoB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC5E,qBAAM,OAAO,GAAG,cAAc,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC;QACpD,qBAAM,QAAQ,GAAG,eAAe,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAE3D,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,UAAU,CAAC;aACzC,IAAI,CAAC,UAAC,aAAa,IAAK,OAAA,KAAI,CAAC,sBAAsB,CAAC,aAAa,EAAE,OAAO,CAAC,EAAnD,CAAmD,CAAC,CAAC;KACnF;;;;;IAEO,wCAAkB;;;;cAAC,SAAmC;QAC5D,qBAAM,MAAM,qBAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAmB,CAAA,CAAC;QACxE,EAAE,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC9C,SAAS,CAAC,oBAAoB,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;SAClE;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;YAC5C,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SAC1C;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,KAAK,CACX,gBAAc,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,mHAA4G;gBACnK,6BAA6B,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;;IAGhC;;OAEG;;;;;;IACH,+BAAS;;;;;IAAT,UAAU,QAAoB,IAAU,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE;IAMhF,sBAAI,iCAAQ;QAJZ;;;WAGG;;;;;;QACH,cAA2B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;;;OAAA;IAEnD;;OAEG;;;;;IACH,6BAAO;;;;IAAP;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAC7D;QACD,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,OAAO,EAAE,EAAhB,CAAgB,CAAC,CAAC;QAC1D,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,EAAE,EAAV,CAAU,CAAC,CAAC;QACvD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KACxB;IAED,sBAAI,kCAAS;;;;QAAb,cAAkB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;;;OAAA;;gBAjI5C,UAAU;;;;gBAvKyB,QAAQ;;sBAlB5C;;SA0La,WAAW;;;;;;;;;;;;;;;;;;;;;;AAmIxB,mBAAmB,YAA0C;IAC3D,qBAAI,MAAc,CAAC;IAEnB,EAAE,CAAC,CAAC,YAAY,KAAK,MAAM,CAAC,CAAC,CAAC;QAC5B,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;KAC3B;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,GAAG,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC;YAC5D,IAAI,MAAM,CAAC,EAAC,oBAAoB,EAAE,SAAS,EAAE,EAAC,CAAC,CAAC;KACrD;IACD,MAAM,CAAC,MAAM,CAAC;CACf;;;;;;;AAED,sCACI,YAA0B,EAAE,MAAc,EAAE,QAAmB;IACjE,IAAI,CAAC;QACH,qBAAM,MAAM,GAAG,QAAQ,EAAE,CAAC;QAC1B,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,UAAC,CAAM;gBACzB,MAAM,CAAC,iBAAiB,CAAC,cAAM,OAAA,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,EAA3B,CAA2B,CAAC,CAAC;;gBAE5D,MAAM,CAAC,CAAC;aACT,CAAC,CAAC;SACJ;QAED,MAAM,CAAC,MAAM,CAAC;KACf;IAAC,KAAK,CAAC,CAAC,iBAAA,CAAC,EAAE,CAAC;QACX,MAAM,CAAC,iBAAiB,CAAC,cAAM,OAAA,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,EAA3B,CAA2B,CAAC,CAAC;;QAE5D,MAAM,CAAC,CAAC;KACT;CACF;;;;;;;AAED,wBAA0C,GAAQ,EAAE,IAAa;IAC/D,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;KACxC;IAAC,IAAI,CAAC,CAAC;QACN,GAAG,wBAAO,GAAG,EAAK,mBAAC,IAAW,EAAC,CAAC,CAAC;KAClC;IACD,MAAM,CAAC,GAAG,CAAC;CACZ;;;;;;;IAiCC,gBAAgB;IAChB,wBACY,OAAuB,QAAiB,EAAU,SAAmB,EACrE,mBACA,2BACA;QAJZ,iBAuDC;QAtDW,UAAK,GAAL,KAAK;QAAkB,aAAQ,GAAR,QAAQ,CAAS;QAAU,cAAS,GAAT,SAAS,CAAU;QACrE,sBAAiB,GAAjB,iBAAiB;QACjB,8BAAyB,GAAzB,yBAAyB;QACzB,gBAAW,GAAX,WAAW;mCA3BiD,EAAE;sBACtC,EAAE;4BACN,KAAK;oCACG,KAAK;uBAC3B,IAAI;;;;;8BAMwB,EAAE;;;;0BAKE,EAAE;QAalD,IAAI,CAAC,oBAAoB,GAAG,SAAS,EAAE,CAAC;QAExC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,CACjC,EAAC,IAAI,EAAE,cAAQ,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAQ,KAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAC,CAAC,CAAC;QAE/D,qBAAM,iBAAiB,GAAG,IAAI,UAAU,CAAU,UAAC,QAA2B;YAC5E,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,oBAAoB;gBAClE,CAAC,KAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC;YACrC,KAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;gBAC3B,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;gBAC5B,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACrB,CAAC,CAAC;SACJ,CAAC,CAAC;QAEH,qBAAM,QAAQ,GAAG,IAAI,UAAU,CAAU,UAAC,QAA2B;;;YAGnE,qBAAI,SAAuB,CAAC;YAC5B,KAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;gBAC3B,SAAS,GAAG,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC;oBACxC,MAAM,CAAC,sBAAsB,EAAE,CAAC;;;oBAIhC,iBAAiB,CAAC;wBAChB,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,OAAO,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,oBAAoB;4BACjD,CAAC,KAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;4BACrC,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;4BACpB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBACrB;qBACF,CAAC,CAAC;iBACJ,CAAC,CAAC;aACJ,CAAC,CAAC;YAEH,qBAAM,WAAW,GAAiB,KAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC;gBAChE,MAAM,CAAC,mBAAmB,EAAE,CAAC;gBAC7B,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC;oBACjB,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;oBACrB,KAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,cAAQ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;iBAC/D;aACF,CAAC,CAAC;YAEH,MAAM,CAAC;gBACL,SAAS,CAAC,WAAW,EAAE,CAAC;gBACxB,WAAW,CAAC,WAAW,EAAE,CAAC;aAC3B,CAAC;SACH,CAAC,CAAC;QAEH,mBAAC,IAAsC,EAAC,CAAC,QAAQ;YAC7C,KAAK,CAAC,iBAAiB,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;KACtD;IAED;;;;;;;;;;;;;;OAcG;;;;;;;;;;;;;;;;;;;;IACH,kCAAS;;;;;;;;;;;;;;;;;;;IAAT,UAAa,kBAA+C,EAAE,kBAA+B;QAA7F,iBAmCC;QAjCC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3B,MAAM,IAAI,KAAK,CACX,+IAA+I,CAAC,CAAC;SACtJ;QACD,qBAAI,gBAAqC,CAAC;QAC1C,EAAE,CAAC,CAAC,kBAAkB,YAAY,gBAAgB,CAAC,CAAC,CAAC;YACnD,gBAAgB,GAAG,kBAAkB,CAAC;SACvC;QAAC,IAAI,CAAC,CAAC;YACN,gBAAgB;mCACZ,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,EAAE,CAAC;SAClF;QACD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;;QAGzD,qBAAM,QAAQ,GAAG,gBAAgB,YAAY,6BAA6B,CAAC,CAAC;YACxE,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACpC,qBAAM,cAAc,GAAG,kBAAkB,IAAI,gBAAgB,CAAC,QAAQ,CAAC;QACvE,qBAAM,OAAO,GAAG,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QAErF,OAAO,CAAC,SAAS,CAAC,cAAQ,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;QAC7D,qBAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAC5D,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAChB,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC;iBACpC,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;SACvE;QAED,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC7B,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,GAAG,CACb,kGAAkG,CAAC,CAAC;SACzG;QACD,MAAM,CAAC,OAAO,CAAC;KAChB;IAED;;;;;;;;;OASG;;;;;;;;;;;;IACH,6BAAI;;;;;;;;;;;IAAJ;QAAA,iBAmBC;QAlBC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAC9D;QAED,qBAAM,KAAK,GAAG,cAAc,CAAC,UAAU,EAAE,CAAC;QAC1C,IAAI,CAAC;YACH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,aAAa,EAAE,EAApB,CAAoB,CAAC,CAAC;YACpD,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,cAAc,EAAE,EAArB,CAAqB,CAAC,CAAC;aACtD;SACF;QAAC,KAAK,CAAC,CAAC,iBAAA,CAAC,EAAE,CAAC;;YAEX,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,cAAM,OAAA,KAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,EAArC,CAAqC,CAAC,CAAC;SAC3E;gBAAS,CAAC;YACT,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,QAAQ,CAAC,KAAK,CAAC,CAAC;SACjB;KACF;IAED;;;;OAIG;;;;;;;;IACH,mCAAU;;;;;;;IAAV,UAAW,OAAgB;QACzB,qBAAM,IAAI,GAAG,mBAAC,OAA0B,EAAC,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;KAC3B;IAED;;OAEG;;;;;;IACH,mCAAU;;;;;IAAV,UAAW,OAAgB;QACzB,qBAAM,IAAI,GAAG,mBAAC,OAA0B,EAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;;;;;IAEO,uCAAc;;;;cAAC,YAA+B;QACpD,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;;QAEnC,qBAAM,SAAS,GACX,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,sBAAsB,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACpF,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ,IAAK,OAAA,QAAQ,CAAC,YAAY,CAAC,EAAtB,CAAsB,CAAC,CAAC;;;;;;IAGlD,yCAAgB;;;;cAAC,YAA+B;QACtD,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACvC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;;IAGxC,gBAAgB;;;;;IAChB,oCAAW;;;;IAAX;;QAEE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;KACvD;IAKD,sBAAI,qCAAS;QAHb;;WAEG;;;;;QACH,cAAkB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;;;OAAA;;;;gCAhNd,cAAc,CAAC,uBAAuB,CAAC;;gBAHxE,UAAU;;;;gBAhVH,MAAM;gBAVN,OAAO;gBACqB,QAAQ;gBAPpC,YAAY;gBAUmB,wBAAwB;gBANvD,qBAAqB;;yBAf7B;;SA4Wa,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqN3B,gBAAmB,IAAS,EAAE,EAAK;IACjC,qBAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/B,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;KACvB;CACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Observer, Subscription, merge} from 'rxjs';\nimport {share} from 'rxjs/operators';\n\nimport {ErrorHandler} from '../src/error_handler';\nimport {scheduleMicroTask, stringify} from '../src/util';\nimport {isPromise} from '../src/util/lang';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {Console} from './console';\nimport {Injectable, InjectionToken, Injector, StaticProvider} from './di';\nimport {CompilerFactory, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryBoundToModule, ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory, NgModuleRef} from './linker/ng_module_factory';\nimport {InternalViewRef, ViewRef} from './linker/view_ref';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from './profile/profile';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {Type} from './type';\nimport {NgZone, NoopNgZone} from './zone/ng_zone';\n\nlet _devMode: boolean = true;\nlet _runModeLocked: boolean = false;\nlet _platform: PlatformRef;\n\nexport const ALLOW_MULTIPLE_PLATFORMS = new InjectionToken<boolean>('AllowMultipleToken');\n\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @stable\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    throw new Error('Cannot enable prod mode after platform setup.');\n  }\n  _devMode = false;\n}\n\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @experimental\n */\nexport class NgProbeToken {\n  constructor(public name: string, public token: any) {}\n}\n\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platform && !_platform.destroyed &&\n      !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new Error(\n        'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  _platform = injector.get(PlatformRef);\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) inits.forEach((init: any) => init());\n  return _platform;\n}\n\n/**\n * Creates a factory for a platform\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function createPlatformFactory(\n    parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef) | null,\n    name: string, providers: StaticProvider[] = []): (extraProviders?: StaticProvider[]) =>\n    PlatformRef {\n  const desc = `Platform: ${name}`;\n  const marker = new InjectionToken(desc);\n  return (extraProviders: StaticProvider[] = []) => {\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      if (parentPlatformFactory) {\n        parentPlatformFactory(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}));\n      } else {\n        const injectedProviders: StaticProvider[] =\n            providers.concat(extraProviders).concat({provide: marker, useValue: true});\n        createPlatform(Injector.create({providers: injectedProviders, name: desc}));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const platform = getPlatform();\n\n  if (!platform) {\n    throw new Error('No platform exists!');\n  }\n\n  if (!platform.injector.get(requiredToken, null)) {\n    throw new Error(\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n\n  return platform;\n}\n\n/**\n * Destroy the existing platform.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function destroyPlatform(): void {\n  if (_platform && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n\n/**\n * Returns the current platform.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function getPlatform(): PlatformRef|null {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n\n/**\n * Provides additional options to the bootstraping process.\n *\n * @stable\n */\nexport interface BootstrapOptions {\n  /**\n   * Optionally specify which `NgZone` should be used.\n   *\n   * - Provide your own `NgZone` instance.\n   * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n   * - `noop` - Use `NoopNgZone` which does nothing.\n   */\n  ngZone?: NgZone|'zone.js'|'noop';\n}\n\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n *\n * @stable\n */\n@Injectable()\nexport class PlatformRef {\n  private _modules: NgModuleRef<any>[] = [];\n  private _destroyListeners: Function[] = [];\n  private _destroyed: boolean = false;\n\n  /** @internal */\n  constructor(private _injector: Injector) {}\n\n  /**\n   * Creates an instance of an `@NgModule` for the given platform\n   * for offline compilation.\n   *\n   * ## Simple Example\n   *\n   * ```typescript\n   * my_module.ts:\n   *\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * main.ts:\n   * import {MyModuleNgFactory} from './my_module.ngfactory';\n   * import {platformBrowser} from '@angular/platform-browser';\n   *\n   * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n   * ```\n   *\n   * @experimental APIs related to application bootstrap are currently under review.\n   */\n  bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    const ngZoneOption = options ? options.ngZone : undefined;\n    const ngZone = getNgZone(ngZoneOption);\n    const providers: StaticProvider[] = [{provide: NgZone, useValue: ngZone}];\n    // Attention: Don't use ApplicationRef.run here,\n    // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n    return ngZone.run(() => {\n      const ngZoneInjector = Injector.create(\n          {providers: providers, parent: this.injector, name: moduleFactory.moduleType.name});\n      const moduleRef = <InternalNgModuleRef<M>>moduleFactory.create(ngZoneInjector);\n      const exceptionHandler: ErrorHandler = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      moduleRef.onDestroy(() => remove(this._modules, moduleRef));\n      ngZone !.runOutsideAngular(\n          () => ngZone !.onError.subscribe(\n              {next: (error: any) => { exceptionHandler.handleError(error); }}));\n      return _callAndReportToErrorHandler(exceptionHandler, ngZone !, () => {\n        const initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n   *\n   * ## Simple Example\n   *\n   * ```typescript\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n   * ```\n   * @stable\n   */\n  bootstrapModule<M>(\n      moduleType: Type<M>, compilerOptions: (CompilerOptions&BootstrapOptions)|\n      Array<CompilerOptions&BootstrapOptions> = []): Promise<NgModuleRef<M>> {\n    const compilerFactory: CompilerFactory = this.injector.get(CompilerFactory);\n    const options = optionsReducer({}, compilerOptions);\n    const compiler = compilerFactory.createCompiler([options]);\n\n    return compiler.compileModuleAsync(moduleType)\n        .then((moduleFactory) => this.bootstrapModuleFactory(moduleFactory, options));\n  }\n\n  private _moduleDoBootstrap(moduleRef: InternalNgModuleRef<any>): void {\n    const appRef = moduleRef.injector.get(ApplicationRef) as ApplicationRef;\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new Error(\n          `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n          `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\n\n  /**\n   * Register a listener to be called when the platform is disposed.\n   */\n  onDestroy(callback: () => void): void { this._destroyListeners.push(callback); }\n\n  /**\n   * Retrieve the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  get injector(): Injector { return this._injector; }\n\n  /**\n   * Destroy the Angular platform and all Angular applications on the page.\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new Error('The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    this._destroyed = true;\n  }\n\n  get destroyed() { return this._destroyed; }\n}\n\nfunction getNgZone(ngZoneOption?: NgZone | 'zone.js' | 'noop'): NgZone {\n  let ngZone: NgZone;\n\n  if (ngZoneOption === 'noop') {\n    ngZone = new NoopNgZone();\n  } else {\n    ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n        new NgZone({enableLongStackTrace: isDevMode()});\n  }\n  return ngZone;\n}\n\nfunction _callAndReportToErrorHandler(\n    errorHandler: ErrorHandler, ngZone: NgZone, callback: () => any): any {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n\nfunction optionsReducer<T extends Object>(dst: any, objs: T | T[]): T {\n  if (Array.isArray(objs)) {\n    dst = objs.reduce(optionsReducer, dst);\n  } else {\n    dst = {...dst, ...(objs as any)};\n  }\n  return dst;\n}\n\n/**\n * A reference to an Angular application running on a page.\n *\n * @stable\n */\n@Injectable()\nexport class ApplicationRef {\n  /** @internal */\n  static _tickScope: WtfScopeFn = wtfCreateScope('ApplicationRef#tick()');\n  private _bootstrapListeners: ((compRef: ComponentRef<any>) => void)[] = [];\n  private _views: InternalViewRef[] = [];\n  private _runningTick: boolean = false;\n  private _enforceNoNewChanges: boolean = false;\n  private _stable = true;\n\n  /**\n   * Get a list of component types registered to this application.\n   * This list is populated even before the component is created.\n   */\n  public readonly componentTypes: Type<any>[] = [];\n\n  /**\n   * Get a list of components registered to this application.\n   */\n  public readonly components: ComponentRef<any>[] = [];\n\n  /**\n   * Returns an Observable that indicates when the application is stable or unstable.\n   */\n  public readonly isStable: Observable<boolean>;\n\n  /** @internal */\n  constructor(\n      private _zone: NgZone, private _console: Console, private _injector: Injector,\n      private _exceptionHandler: ErrorHandler,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _initStatus: ApplicationInitStatus) {\n    this._enforceNoNewChanges = isDevMode();\n\n    this._zone.onMicrotaskEmpty.subscribe(\n        {next: () => { this._zone.run(() => { this.tick(); }); }});\n\n    const isCurrentlyStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n          !this._zone.hasPendingMicrotasks;\n      this._zone.runOutsideAngular(() => {\n        observer.next(this._stable);\n        observer.complete();\n      });\n    });\n\n    const isStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      // Create the subscription to onStable outside the Angular Zone so that\n      // the callback is run outside the Angular Zone.\n      let stableSub: Subscription;\n      this._zone.runOutsideAngular(() => {\n        stableSub = this._zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          scheduleMicroTask(() => {\n            if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks) {\n              this._stable = true;\n              observer.next(true);\n            }\n          });\n        });\n      });\n\n      const unstableSub: Subscription = this._zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        if (this._stable) {\n          this._stable = false;\n          this._zone.runOutsideAngular(() => { observer.next(false); });\n        }\n      });\n\n      return () => {\n        stableSub.unsubscribe();\n        unstableSub.unsubscribe();\n      };\n    });\n\n    (this as{isStable: Observable<boolean>}).isStable =\n        merge(isCurrentlyStable, isStable.pipe(share()));\n  }\n\n  /**\n   * Bootstrap a new component at the root level of the application.\n   *\n   * ### Bootstrap process\n   *\n   * When bootstrapping a new root component into an application, Angular mounts the\n   * specified application component onto DOM elements identified by the [componentType]'s\n   * selector and kicks off automatic change detection to finish initializing the component.\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * [componentType]'s selector.\n   *\n   * ### Example\n   * {@example core/ts/platform/platform.ts region='longform'}\n   */\n  bootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>, rootSelectorOrNode?: string|any):\n      ComponentRef<C> {\n    if (!this._initStatus.done) {\n      throw new Error(\n          'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n    }\n    let componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory =\n          this._componentFactoryResolver.resolveComponentFactory(componentOrFactory) !;\n    }\n    this.componentTypes.push(componentFactory.componentType);\n\n    // Create a factory associated with the current module if it's not bound to some other\n    const ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n        null :\n        this._injector.get(NgModuleRef);\n    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n\n    compRef.onDestroy(() => { this._unloadComponent(compRef); });\n    const testability = compRef.injector.get(Testability, null);\n    if (testability) {\n      compRef.injector.get(TestabilityRegistry)\n          .registerApplication(compRef.location.nativeElement, testability);\n    }\n\n    this._loadComponent(compRef);\n    if (isDevMode()) {\n      this._console.log(\n          `Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n    }\n    return compRef;\n  }\n\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  tick(): void {\n    if (this._runningTick) {\n      throw new Error('ApplicationRef.tick is called recursively');\n    }\n\n    const scope = ApplicationRef._tickScope();\n    try {\n      this._runningTick = true;\n      this._views.forEach((view) => view.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._views.forEach((view) => view.checkNoChanges());\n      }\n    } catch (e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n    } finally {\n      this._runningTick = false;\n      wtfLeave(scope);\n    }\n  }\n\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   */\n  attachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n\n  /**\n   * Detaches a view from dirty checking again.\n   */\n  detachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n\n  private _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners =\n        this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n    listeners.forEach((listener) => listener(componentRef));\n  }\n\n  private _unloadComponent(componentRef: ComponentRef<any>): void {\n    this.detachView(componentRef.hostView);\n    remove(this.components, componentRef);\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    // TODO(alxhub): Dispose of the NgZone.\n    this._views.slice().forEach((view) => view.destroy());\n  }\n\n  /**\n   * Returns the number of attached views.\n   */\n  get viewCount() { return this._views.length; }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n"]}