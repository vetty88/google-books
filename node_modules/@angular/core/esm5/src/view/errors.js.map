{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../../../../../packages/core/src/view/errors.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,mBAAmB,EAAE,YAAY,EAAE,eAAe,EAAC,MAAM,WAAW,CAAC;;;;;;;;AAG7E,MAAM,sDACF,OAAqB,EAAE,QAAa,EAAE,SAAc,EAAE,YAAqB;IAC7E,qBAAI,GAAG,GACH,gHAA8G,QAAQ,2BAAsB,SAAS,OAAI,CAAC;IAC9J,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;QACjB,GAAG;YACC,qGAAqG;gBACrG,mDAAmD,CAAC;KACzD;IACD,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;CACrC;;;;;;AAED,MAAM,gCAAgC,GAAQ,EAAE,OAAqB;IACnE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC;;;QAG5B,GAAG,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;KACjC;IACD,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC/B,MAAM,CAAC,GAAG,CAAC;CACZ;;;;;;AAED,MAAM,yBAAyB,GAAW,EAAE,OAAqB;IAC/D,qBAAM,GAAG,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;IAC3B,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC/B,MAAM,CAAC,GAAG,CAAC;CACZ;;;;;;AAED,0BAA0B,GAAU,EAAE,OAAqB;IACzD,mBAAC,GAAU,EAAC,CAAC,mBAAmB,CAAC,GAAG,OAAO,CAAC;IAC5C,mBAAC,GAAU,EAAC,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;CAC7D;;;;;AAED,MAAM,2BAA2B,GAAU;IACzC,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;CAC/B;;;;;AAED,MAAM,6BAA6B,MAAc;IAC/C,MAAM,CAAC,IAAI,KAAK,CAAC,0DAAwD,MAAQ,CAAC,CAAC;CACpF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_DEBUG_CONTEXT, ERROR_LOGGER, getDebugContext} from '../errors';\nimport {DebugContext, ViewState} from './types';\n\nexport function expressionChangedAfterItHasBeenCheckedError(\n    context: DebugContext, oldValue: any, currValue: any, isFirstCheck: boolean): Error {\n  let msg =\n      `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n  if (isFirstCheck) {\n    msg +=\n        ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n        ` Has it been created in a change detection hook ?`;\n  }\n  return viewDebugError(msg, context);\n}\n\nexport function viewWrappedDebugError(err: any, context: DebugContext): Error {\n  if (!(err instanceof Error)) {\n    // errors that are not Error instances don't have a stack,\n    // so it is ok to wrap them into a new Error object...\n    err = new Error(err.toString());\n  }\n  _addDebugContext(err, context);\n  return err;\n}\n\nexport function viewDebugError(msg: string, context: DebugContext): Error {\n  const err = new Error(msg);\n  _addDebugContext(err, context);\n  return err;\n}\n\nfunction _addDebugContext(err: Error, context: DebugContext) {\n  (err as any)[ERROR_DEBUG_CONTEXT] = context;\n  (err as any)[ERROR_LOGGER] = context.logError.bind(context);\n}\n\nexport function isViewDebugError(err: Error): boolean {\n  return !!getDebugContext(err);\n}\n\nexport function viewDestroyedError(action: string): Error {\n  return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);\n}\n"]}