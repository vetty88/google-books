{"version":3,"file":"injectable.js","sourceRoot":"","sources":["../../../../../packages/core/src/di/injectable.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ReflectionCapabilities} from '../reflection/reflection_capabilities';\nimport {Type} from '../type';\nimport {makeDecorator, makeParamDecorator} from '../util/decorators';\nimport {getClosureSafeProperty} from '../util/property';\n\nimport {InjectableDef, InjectableType, defineInjectable} from './defs';\nimport {inject, injectArgs} from './injector';\nimport {ClassSansProvider, ConstructorProvider, ConstructorSansProvider, ExistingProvider, ExistingSansProvider, FactoryProvider, FactorySansProvider, StaticClassProvider, StaticClassSansProvider, ValueProvider, ValueSansProvider} from './provider';\n\nconst GET_PROPERTY_NAME = {} as any;\nconst USE_VALUE = getClosureSafeProperty<ValueProvider>(\n    {provide: String, useValue: GET_PROPERTY_NAME}, GET_PROPERTY_NAME);\n\n/**\n * Injectable providers used in `@Injectable` decorator.\n *\n * @experimental\n */\nexport type InjectableProvider = ValueSansProvider | ExistingSansProvider |\n    StaticClassSansProvider | ConstructorSansProvider | FactorySansProvider | ClassSansProvider;\n\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * @stable\n */\nexport interface InjectableDecorator {\n  /**\n   * @whatItDoes A marker metadata that marks a class as available to {@link Injector} for creation.\n   * @howToUse\n   * ```\n   * @Injectable()\n   * class Car {}\n   * ```\n   *\n   * @description\n   * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Injectable'}\n   *\n   * {@link Injector} will throw an error when trying to instantiate a class that\n   * does not have `@Injectable` marker, as shown in the example below.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='InjectableThrows'}\n   *\n   * @stable\n   */\n  (): any;\n  (options?: {providedIn: Type<any>| 'root' | null}&InjectableProvider): any;\n  new (): Injectable;\n  new (options?: {providedIn: Type<any>| 'root' | null}&InjectableProvider): Injectable;\n}\n\n/**\n * Type of the Injectable metadata.\n *\n * @experimental\n */\nexport interface Injectable {\n  providedIn?: Type<any>|'root'|null;\n  factory: () => any;\n}\n\nconst EMPTY_ARRAY: any[] = [];\n\nexport function convertInjectableProviderToFactory(\n    type: Type<any>, provider?: InjectableProvider): () => any {\n  if (!provider) {\n    const reflectionCapabilities = new ReflectionCapabilities();\n    const deps = reflectionCapabilities.parameters(type);\n    // TODO - convert to flags.\n    return () => new type(...injectArgs(deps as any[]));\n  }\n\n  if (USE_VALUE in provider) {\n    const valueProvider = (provider as ValueSansProvider);\n    return () => valueProvider.useValue;\n  } else if ((provider as ExistingSansProvider).useExisting) {\n    const existingProvider = (provider as ExistingSansProvider);\n    return () => inject(existingProvider.useExisting);\n  } else if ((provider as FactorySansProvider).useFactory) {\n    const factoryProvider = (provider as FactorySansProvider);\n    return () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY));\n  } else if ((provider as StaticClassSansProvider | ClassSansProvider).useClass) {\n    const classProvider = (provider as StaticClassSansProvider | ClassSansProvider);\n    let deps = (provider as StaticClassSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new classProvider.useClass(...injectArgs(deps));\n  } else {\n    let deps = (provider as ConstructorSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new type(...injectArgs(deps !));\n  }\n}\n\n/**\n* Injectable decorator and metadata.\n*\n* @stable\n* @Annotation\n*/\nexport const Injectable: InjectableDecorator = makeDecorator(\n    'Injectable', undefined, undefined, undefined,\n    (injectableType: InjectableType<any>,\n     options: {providedIn?: Type<any>| 'root' | null} & InjectableProvider) => {\n      if (options && options.providedIn !== undefined) {\n        injectableType.ngInjectableDef = defineInjectable({\n          providedIn: options.providedIn,\n          factory: convertInjectableProviderToFactory(injectableType, options)\n        });\n      }\n    });\n\n/**\n * Type representing injectable service.\n *\n * @experimental\n */\nexport interface InjectableType<T> extends Type<T> { ngInjectableDef: InjectableDef<T>; }\n"]}