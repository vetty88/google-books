{"version":3,"file":"injector.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/interfaces/injector.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA,MAAM,CAAC,uBAAM,6BAA6B,GAAG,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef} from '../../change_detection/change_detector_ref';\nimport {Injector} from '../../di/injector';\nimport {ElementRef} from '../../linker/element_ref';\nimport {TemplateRef} from '../../linker/template_ref';\nimport {ViewContainerRef} from '../../linker/view_container_ref';\n\nimport {LContainerNode, LElementNode} from './node';\n\nexport interface LInjector {\n  /**\n   * We need to store a reference to the injector's parent so DI can keep looking up\n   * the injector tree until it finds the dependency it's looking for.\n   */\n  readonly parent: LInjector|null;\n\n  /**\n   * Allows access to the directives array in that node's static data and to\n   * the node's flags (for starting directive index and directive size). Necessary\n   * for DI to retrieve a directive from the data array if injector indicates\n   * it is there.\n   */\n  readonly node: LElementNode|LContainerNode;\n\n  /**\n   * The following bloom filter determines whether a directive is available\n   * on the associated node or not. This prevents us from searching the directives\n   * array at this level unless it's probable the directive is in it.\n   *\n   * - bf0: Check directive IDs 0-31  (IDs are % 128)\n   * - bf1: Check directive IDs 32-63\n   * - bf2: Check directive IDs 64-95\n   * - bf3: Check directive IDs 96-127\n   * - bf4: Check directive IDs 128-159\n   * - bf5: Check directive IDs 160 - 191\n   * - bf6: Check directive IDs 192 - 223\n   * - bf7: Check directive IDs 224 - 255\n   *\n   * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n   */\n  bf0: number;\n  bf1: number;\n  bf2: number;\n  bf3: number;\n  bf4: number;\n  bf5: number;\n  bf6: number;\n  bf7: number;\n\n  /**\n   * cbf0 - cbf7 properties determine whether a directive is available through a\n   * parent injector. They refer to the merged values of parent bloom filters. This\n   * allows us to skip looking up the chain unless it's probable that directive exists\n   * up the chain.\n   */\n  cbf0: number;\n  cbf1: number;\n  cbf2: number;\n  cbf3: number;\n  cbf4: number;\n  cbf5: number;\n  cbf6: number;\n  cbf7: number;\n\n  injector: Injector|null;\n\n  /** Stores the TemplateRef so subsequent injections of the TemplateRef get the same instance. */\n  templateRef: TemplateRef<any>|null;\n\n  /** Stores the ViewContainerRef so subsequent injections of the ViewContainerRef get the same\n   * instance. */\n  viewContainerRef: ViewContainerRef|null;\n\n  /** Stores the ElementRef so subsequent injections of the ElementRef get the same instance. */\n  elementRef: ElementRef|null;\n\n  /**\n   * Stores the ChangeDetectorRef so subsequent injections of the ChangeDetectorRef get the\n   * same instance.\n   */\n  changeDetectorRef: ChangeDetectorRef|null;\n}\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n"]}