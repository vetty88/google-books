{"version":3,"file":"assert.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/assert.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAYA,MAAM,uBAAuB,MAAW,EAAE,GAAW;IACnD,EAAE,CAAC,CAAC,OAAO,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC;QAC9B,UAAU,CAAC,GAAG,CAAC,CAAC;KACjB;CACF;;;;;;;;AAED,MAAM,sBAAyB,MAAS,EAAE,QAAW,EAAE,GAAW;IAChE,EAAE,CAAC,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC;QACvB,UAAU,CAAC,GAAG,CAAC,CAAC;KACjB;CACF;;;;;;;;AAED,MAAM,yBAA4B,MAAS,EAAE,QAAW,EAAE,GAAW;IACnE,EAAE,CAAC,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC;QACvB,UAAU,CAAC,GAAG,CAAC,CAAC;KACjB;CACF;;;;;;;;AAED,MAAM,qBAAwB,MAAS,EAAE,QAAW,EAAE,GAAW;IAC/D,EAAE,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;QACxB,UAAU,CAAC,GAAG,CAAC,CAAC;KACjB;CACF;;;;;;;;AAED,MAAM,yBAA4B,MAAS,EAAE,QAAW,EAAE,GAAW;IACnE,EAAE,CAAC,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC;QACvB,UAAU,CAAC,GAAG,CAAC,CAAC;KACjB;CACF;;;;;;;AAED,MAAM,qBAAwB,MAAS,EAAE,GAAW;IAClD,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;QACnB,UAAU,CAAC,GAAG,CAAC,CAAC;KACjB;CACF;;;;;;;AAED,MAAM,wBAA2B,MAAS,EAAE,GAAW;IACrD,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;QACnB,UAAU,CAAC,GAAG,CAAC,CAAC;KACjB;CACF;;;;;;AAED,MAAM,8BACF,MAAW,EACX,MACI,oFAAoF;IAC1F,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;QAC3B,UAAU,CAAC,GAAG,CAAC,CAAC;KACjB;CACF;;;;;AAED,oBAAoB,GAAW;IAC7B,MAAM,IAAI,KAAK,CAAC,oBAAoB,GAAG,EAAE,CAAC,CAAC;CAC5C","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// The functions in this file verify that the assumptions we are making\n// about state in an instruction are correct before implementing any logic.\n// They are meant only to be called in dev mode as sanity checks.\n\nexport function assertNumber(actual: any, msg: string) {\n  if (typeof actual != 'number') {\n    throwError(msg);\n  }\n}\n\nexport function assertEqual<T>(actual: T, expected: T, msg: string) {\n  if (actual != expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertNotEqual<T>(actual: T, expected: T, msg: string) {\n  if (actual == expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertSame<T>(actual: T, expected: T, msg: string) {\n  if (actual !== expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertLessThan<T>(actual: T, expected: T, msg: string) {\n  if (actual >= expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertNull<T>(actual: T, msg: string) {\n  if (actual != null) {\n    throwError(msg);\n  }\n}\n\nexport function assertNotNull<T>(actual: T, msg: string) {\n  if (actual == null) {\n    throwError(msg);\n  }\n}\n\nexport function assertComponentType(\n    actual: any,\n    msg: string =\n        'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.') {\n  if (!actual.ngComponentDef) {\n    throwError(msg);\n  }\n}\n\nfunction throwError(msg: string): never {\n  throw new Error(`ASSERTION ERROR: ${msg}`);\n}"]}