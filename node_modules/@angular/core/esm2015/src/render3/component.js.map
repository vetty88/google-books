{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\nimport {Type} from '../core';\nimport {Injector} from '../di/injector';\nimport {ComponentRef as viewEngine_ComponentRef} from '../linker/component_factory';\n\nimport {assertComponentType, assertNotNull} from './assert';\nimport {queueInitHooks, queueLifecycleHooks} from './hooks';\nimport {CLEAN_PROMISE, _getComponentHostLElementNode, baseDirectiveCreate, createLView, createTView, enterView, getRootView, hostElement, initChangeDetectorIfExisting, locateHostElement, renderComponentOrTemplate} from './instructions';\nimport {ComponentDef, ComponentType} from './interfaces/definition';\nimport {LElementNode} from './interfaces/node';\nimport {RElement, RendererFactory3, domRendererFactory3} from './interfaces/renderer';\nimport {LView, LViewFlags, RootContext} from './interfaces/view';\nimport {stringify} from './util';\nimport {createViewRef} from './view_ref';\n\n\n\n/** Options that control how the component should be bootstrapped. */\nexport interface CreateComponentOptions {\n  /** Which renderer factory to use. */\n  rendererFactory?: RendererFactory3;\n\n  /**\n   * Host element on which the component will be bootstrapped. If not specified,\n   * the component definition's `tag` is used to query the existing DOM for the\n   * element to bootstrap.\n   */\n  host?: RElement|string;\n\n  /** Module injector for the component. If unspecified, the injector will be NULL_INJECTOR. */\n  injector?: Injector;\n\n  /**\n   * List of features to be applied to the created component. Features are simply\n   * functions that decorate a component with a certain behavior.\n   *\n   * Typically, the features in this list are features that cannot be added to the\n   * other features list in the component definition because they rely on other factors.\n   *\n   * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n   * to root components in a tree-shakable way. It cannot be added to the component\n   * features list because there's no way of knowing when the component will be used as\n   * a root component.\n   */\n  hostFeatures?: (<T>(component: T, componentDef: ComponentDef<T>) => void)[];\n\n  /**\n   * A function which is used to schedule change detection work in the future.\n   *\n   * When marking components as dirty, it is necessary to schedule the work of\n   * change detection in the future. This is done to coalesce multiple\n   * {@link markDirty} calls into a single changed detection processing.\n   *\n   * The default value of the scheduler is the `requestAnimationFrame` function.\n   *\n   * It is also useful to override this function for testing purposes.\n   */\n  scheduler?: (work: () => void) => void;\n}\n\n\n/**\n * Bootstraps a component, then creates and returns a `ComponentRef` for that component.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nexport function createComponentRef<T>(\n    componentType: ComponentType<T>, opts: CreateComponentOptions): viewEngine_ComponentRef<T> {\n  const component = renderComponent(componentType, opts);\n  const hostView = _getComponentHostLElementNode(component).data as LView;\n  const hostViewRef = createViewRef(hostView, component);\n  return {\n    location: {nativeElement: getHostElement(component)},\n    injector: opts.injector || NULL_INJECTOR,\n    instance: component,\n    hostView: hostViewRef,\n    changeDetectorRef: hostViewRef,\n    componentType: componentType,\n    // TODO: implement destroy and onDestroy\n    destroy: () => {},\n    onDestroy: (cb: Function) => {}\n  };\n}\n\n\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nexport const NULL_INJECTOR: Injector = {\n  get: (token: any, notFoundValue?: any) => {\n    throw new Error('NullInjector: Not found: ' + stringify(token));\n  }\n};\n\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {@link ViewContainer#createComponent}.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nexport function renderComponent<T>(\n    componentType: ComponentType<T>|\n        Type<T>/* Type as workaround for: Microsoft/TypeScript/issues/4881 */\n    ,\n    opts: CreateComponentOptions = {}): T {\n  ngDevMode && assertComponentType(componentType);\n  const rendererFactory = opts.rendererFactory || domRendererFactory3;\n  const componentDef = (componentType as ComponentType<T>).ngComponentDef as ComponentDef<T>;\n  if (componentDef.type != componentType) componentDef.type = componentType;\n  let component: T;\n  const hostNode = locateHostElement(rendererFactory, opts.host || componentDef.tag);\n  const rootContext: RootContext = {\n    // Incomplete initialization due to circular reference.\n    component: null !,\n    scheduler: opts.scheduler || requestAnimationFrame,\n    clean: CLEAN_PROMISE,\n  };\n  const rootView = createLView(\n      -1, rendererFactory.createRenderer(hostNode, componentDef.rendererType), createTView(), null,\n      rootContext, componentDef.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways);\n\n  const oldView = enterView(rootView, null !);\n\n  let elementNode: LElementNode;\n  try {\n    // Create element node at index 0 in data array\n    elementNode = hostElement(hostNode, componentDef);\n    // Create directive instance with factory() and store at index 1 in data array (el is 0)\n    component = rootContext.component =\n        baseDirectiveCreate(1, componentDef.factory(), componentDef) as T;\n    initChangeDetectorIfExisting(elementNode.nodeInjector, component);\n  } finally {\n    // We must not use leaveView here because it will set creationMode to false too early,\n    // causing init-only hooks not to run. The detectChanges call below will execute\n    // leaveView at the appropriate time in the lifecycle.\n    enterView(oldView, null);\n  }\n\n  opts.hostFeatures && opts.hostFeatures.forEach((feature) => feature(component, componentDef));\n  renderComponentOrTemplate(elementNode, rootView, component);\n  return component;\n}\n\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n */\nexport function LifecycleHooksFeature(component: any, def: ComponentDef<any>): void {\n  const elementNode = _getComponentHostLElementNode(component);\n\n  // Root component is always created at dir index 1, after host element at 0\n  queueInitHooks(1, def.onInit, def.doCheck, elementNode.view.tView);\n  queueLifecycleHooks(elementNode.flags, elementNode.view);\n}\n\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param component any component\n */\nfunction getRootContext(component: any): RootContext {\n  const rootContext = getRootView(component).context as RootContext;\n  ngDevMode && assertNotNull(rootContext, 'rootContext');\n  return rootContext;\n}\n\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @param component Component for which the host element should be retrieved.\n */\nexport function getHostElement<T>(component: T): HTMLElement {\n  return _getComponentHostLElementNode(component).native as any;\n}\n\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nexport function getRenderedText(component: any): string {\n  const hostElement = getHostElement(component);\n  return hostElement.textContent || '';\n}\n\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param component Component to wait upon\n * @returns Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component: any): Promise<null> {\n  return getRootContext(component).clean;\n}\n"]}