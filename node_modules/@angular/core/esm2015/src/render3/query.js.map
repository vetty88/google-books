{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/query.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine_from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\nimport {Observable} from 'rxjs';\n\nimport {EventEmitter} from '../event_emitter';\nimport {QueryList as viewEngine_QueryList} from '../linker/query_list';\nimport {Type} from '../type';\nimport {getSymbolIterator} from '../util';\n\nimport {assertEqual, assertNotNull} from './assert';\nimport {ReadFromInjectorFn, getOrCreateNodeInjectorForNode} from './di';\nimport {assertPreviousIsParent, getCurrentQueries, store} from './instructions';\nimport {DirectiveDef, unusedValueExportToPlacateAjd as unused1} from './interfaces/definition';\nimport {LInjector, unusedValueExportToPlacateAjd as unused2} from './interfaces/injector';\nimport {LContainerNode, LElementNode, LNode, LNodeFlags, TNode, unusedValueExportToPlacateAjd as unused3} from './interfaces/node';\nimport {LQueries, QueryReadType, unusedValueExportToPlacateAjd as unused4} from './interfaces/query';\nimport {flatten} from './util';\n\nconst unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4;\n\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n */\nexport interface QueryPredicate<T> {\n  /**\n   * If looking for directives then it contains the directive type.\n   */\n  type: Type<T>|null;\n\n  /**\n   * If selector then contains local names to query for.\n   */\n  selector: string[]|null;\n\n  /**\n   * Indicates which token should be read from DI for this query.\n   */\n  read: QueryReadType<T>|Type<T>|null;\n}\n\n/**\n * An object representing a query, which is a combination of:\n * - query predicate to determines if a given element/directive should be included in the query\n * - values collected based on a predicate\n * - `QueryList` to which collected values should be reported\n */\nexport interface LQuery<T> {\n  /**\n   * Next query. Used when queries are stored as a linked list in `LQueries`.\n   */\n  next: LQuery<any>|null;\n\n  /**\n   * Destination to which the value should be added.\n   */\n  list: QueryList<T>;\n\n  /**\n   * A predicate which determines if a given element/directive should be included in the query\n   * results.\n   */\n  predicate: QueryPredicate<T>;\n\n  /**\n   * Values which have been located.\n   *\n   * This is what builds up the `QueryList._valuesTree`.\n   */\n  values: any[];\n}\n\nexport class LQueries_ implements LQueries {\n  shallow: LQuery<any>|null = null;\n  deep: LQuery<any>|null = null;\n\n  constructor(deep?: LQuery<any>) { this.deep = deep == null ? null : deep; }\n\n  track<T>(\n      queryList: viewEngine_QueryList<T>, predicate: Type<T>|string[], descend?: boolean,\n      read?: QueryReadType<T>|Type<T>): void {\n    // TODO(misko): This is not right. In case of inherited state, a calling track will incorrectly\n    // mutate parent.\n    if (descend) {\n      this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n    } else {\n      this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n    }\n  }\n\n  child(): LQueries|null {\n    if (this.deep === null) {\n      // if we don't have any deep queries then no need to track anything more.\n      return null;\n    }\n    if (this.shallow === null) {\n      // DeepQuery: We can reuse the current state if the child state would be same as current\n      // state.\n      return this;\n    } else {\n      // We need to create new state\n      return new LQueries_(this.deep);\n    }\n  }\n\n  container(): LQueries|null {\n    let result: LQuery<any>|null = null;\n    let query = this.deep;\n\n    while (query) {\n      const containerValues: any[] = [];  // prepare room for views\n      query.values.push(containerValues);\n      const clonedQuery: LQuery<any> =\n          {next: null, list: query.list, predicate: query.predicate, values: containerValues};\n      clonedQuery.next = result;\n      result = clonedQuery;\n      query = query.next;\n    }\n\n    return result ? new LQueries_(result) : null;\n  }\n\n  enterView(index: number): LQueries|null {\n    let result: LQuery<any>|null = null;\n    let query = this.deep;\n\n    while (query) {\n      const viewValues: any[] = [];  // prepare room for view nodes\n      query.values.splice(index, 0, viewValues);\n      const clonedQuery: LQuery<any> =\n          {next: null, list: query.list, predicate: query.predicate, values: viewValues};\n      clonedQuery.next = result;\n      result = clonedQuery;\n      query = query.next;\n    }\n\n    return result ? new LQueries_(result) : null;\n  }\n\n  addNode(node: LNode): void {\n    add(this.shallow, node);\n    add(this.deep, node);\n  }\n\n  removeView(index: number): void {\n    let query = this.deep;\n    while (query) {\n      const removed = query.values.splice(index, 1);\n\n      // mark a query as dirty only when removed view had matching modes\n      ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n      if (removed[0].length) {\n        query.list.setDirty();\n      }\n\n      query = query.next;\n    }\n  }\n}\n\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode: TNode, selector: string): number|null {\n  const localNames = tNode.localNames;\n  if (localNames) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1] as number;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * Iterates over all the directives for a node and returns index of a directive for a given type.\n *\n * @param node Node on which directives are present.\n * @param type Type of a directive to look for.\n * @returns Index of a found directive or null when none found.\n */\nfunction geIdxOfMatchingDirective(node: LNode, type: Type<any>): number|null {\n  const tData = node.view.tView.data;\n  const flags = node.flags;\n  for (let i = flags >> LNodeFlags.INDX_SHIFT,\n           ii = i + ((flags & LNodeFlags.SIZE_MASK) >> LNodeFlags.SIZE_SHIFT);\n       i < ii; i++) {\n    const def = tData[i] as DirectiveDef<any>;\n    if (def.diPublic && def.type === type) {\n      return i;\n    }\n  }\n  return null;\n}\n\nfunction readFromNodeInjector(\n    nodeInjector: LInjector, node: LNode, read: QueryReadType<any>| Type<any>,\n    directiveIdx: number): any {\n  if (read instanceof ReadFromInjectorFn) {\n    return read.read(nodeInjector, node, directiveIdx);\n  } else {\n    const matchingIdx = geIdxOfMatchingDirective(node, read as Type<any>);\n    if (matchingIdx !== null) {\n      return node.view.data[matchingIdx];\n    }\n  }\n  return null;\n}\n\nfunction add(query: LQuery<any>| null, node: LNode) {\n  const nodeInjector = getOrCreateNodeInjectorForNode(node as LElementNode | LContainerNode);\n  while (query) {\n    const predicate = query.predicate;\n    const type = predicate.type;\n    if (type) {\n      const directiveIdx = geIdxOfMatchingDirective(node, type);\n      if (directiveIdx !== null) {\n        // a node is matching a predicate - determine what to read\n        // if read token and / or strategy is not specified, use type as read token\n        const result =\n            readFromNodeInjector(nodeInjector, node, predicate.read || type, directiveIdx);\n        if (result !== null) {\n          addMatch(query, result);\n        }\n      }\n    } else {\n      const selector = predicate.selector !;\n      for (let i = 0; i < selector.length; i++) {\n        ngDevMode && assertNotNull(node.tNode, 'node.tNode');\n        const directiveIdx = getIdxOfMatchingSelector(node.tNode !, selector[i]);\n        if (directiveIdx !== null) {\n          // a node is matching a predicate - determine what to read\n          // note that queries using name selector must specify read strategy\n          ngDevMode && assertNotNull(predicate.read, 'the node should have a predicate');\n          const result = readFromNodeInjector(nodeInjector, node, predicate.read !, directiveIdx);\n          if (result !== null) {\n            addMatch(query, result);\n          }\n        }\n      }\n    }\n    query = query.next;\n  }\n}\n\nfunction addMatch(query: LQuery<any>, matchingValue: any): void {\n  query.values.push(matchingValue);\n  query.list.setDirty();\n}\n\nfunction createPredicate<T>(\n    predicate: Type<T>| string[], read: QueryReadType<T>| Type<T>| null): QueryPredicate<T> {\n  const isArray = Array.isArray(predicate);\n  return {\n    type: isArray ? null : predicate as Type<T>,\n    selector: isArray ? predicate as string[] : null,\n    read: read\n  };\n}\n\nfunction createQuery<T>(\n    previous: LQuery<any>| null, queryList: QueryList<T>, predicate: Type<T>| string[],\n    read: QueryReadType<T>| Type<T>| null): LQuery<T> {\n  return {\n    next: previous,\n    list: queryList,\n    predicate: createPredicate(predicate, read),\n    values: (queryList as any as QueryList_<T>)._valuesTree\n  };\n}\n\nclass QueryList_<T>/* implements viewEngine_QueryList<T> */ {\n  readonly dirty = true;\n  readonly changes: Observable<T> = new EventEmitter();\n  private _values: T[] = [];\n  /** @internal */\n  _valuesTree: any[] = [];\n\n  get length(): number { return this._values.length; }\n\n  get first(): T|null {\n    let values = this._values;\n    return values.length ? values[0] : null;\n  }\n\n  get last(): T|null {\n    let values = this._values;\n    return values.length ? values[values.length - 1] : null;\n  }\n\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n  map<U>(fn: (item: T, index: number, array: T[]) => U): U[] { return this._values.map(fn); }\n\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   */\n  filter(fn: (item: T, index: number, array: T[]) => boolean): T[] {\n    return this._values.filter(fn);\n  }\n\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n  find(fn: (item: T, index: number, array: T[]) => boolean): T|undefined {\n    return this._values.find(fn);\n  }\n\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n  reduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U {\n    return this._values.reduce(fn, init);\n  }\n\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n  forEach(fn: (item: T, index: number, array: T[]) => void): void { this._values.forEach(fn); }\n\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n  some(fn: (value: T, index: number, array: T[]) => boolean): boolean {\n    return this._values.some(fn);\n  }\n\n  toArray(): T[] { return this._values.slice(0); }\n\n  [getSymbolIterator()](): Iterator<T> { return (this._values as any)[getSymbolIterator()](); }\n\n  toString(): string { return this._values.toString(); }\n\n  reset(res: (any[]|T)[]): void {\n    this._values = flatten(res);\n    (this as{dirty: boolean}).dirty = false;\n  }\n\n  notifyOnChanges(): void { (this.changes as EventEmitter<any>).emit(this); }\n  setDirty(): void { (this as{dirty: boolean}).dirty = true; }\n  destroy(): void {\n    (this.changes as EventEmitter<any>).complete();\n    (this.changes as EventEmitter<any>).unsubscribe();\n  }\n}\n\n// NOTE: this hack is here because IQueryList has private members and therefore\n// it can't be implemented only extended.\nexport type QueryList<T> = viewEngine_QueryList<T>;\nexport const QueryList: typeof viewEngine_QueryList = QueryList_ as any;\n\n/**\n * Creates and returns a QueryList.\n *\n * @param memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param predicate The type for which the query will search\n * @param descend Whether or not to descend into children\n * @param read What to save in the query\n * @returns QueryList<T>\n */\nexport function query<T>(\n    memoryIndex: number | null, predicate: Type<any>| string[], descend?: boolean,\n    read?: QueryReadType<T>| Type<T>): QueryList<T> {\n  ngDevMode && assertPreviousIsParent();\n  const queryList = new QueryList<T>();\n  const queries = getCurrentQueries(LQueries_);\n  queries.track(queryList, predicate, descend, read);\n\n  if (memoryIndex != null) {\n    store(memoryIndex, queryList);\n  }\n  return queryList;\n}\n\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n */\nexport function queryRefresh(queryList: QueryList<any>): boolean {\n  const queryListImpl = (queryList as any as QueryList_<any>);\n  if (queryList.dirty) {\n    queryList.reset(queryListImpl._valuesTree);\n    queryList.notifyOnChanges();\n    return true;\n  }\n  return false;\n}\n"]}