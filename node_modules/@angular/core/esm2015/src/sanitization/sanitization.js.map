{"version":3,"file":"sanitization.js","sourceRoot":"","sources":["../../../../../packages/core/src/sanitization/sanitization.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringify} from '../render3/util';\n\nimport {_sanitizeHtml as _sanitizeHtml} from './html_sanitizer';\nimport {_sanitizeStyle as _sanitizeStyle} from './style_sanitizer';\nimport {_sanitizeUrl as _sanitizeUrl} from './url_sanitizer';\n\nconst BRAND = '__SANITIZER_TRUSTED_BRAND__';\n\n/**\n * A branded trusted string used with sanitization.\n *\n * See: {@link TrustedHtmlString}, {@link TrustedResourceUrlString}, {@link TrustedScriptString},\n * {@link TrustedStyleString}, {@link TrustedUrlString}\n */\nexport interface TrustedString extends String {\n  '__SANITIZER_TRUSTED_BRAND__': 'Html'|'Style'|'Script'|'Url'|'ResourceUrl';\n}\n\n/**\n * A branded trusted string used with sanitization of `html` strings.\n *\n * See: {@link bypassSanitizationTrustHtml} and {@link htmlSanitizer}.\n */\nexport interface TrustedHtmlString extends TrustedString { '__SANITIZER_TRUSTED_BRAND__': 'Html'; }\n\n/**\n * A branded trusted string used with sanitization of `style` strings.\n *\n * See: {@link bypassSanitizationTrustStyle} and {@link styleSanitizer}.\n */\nexport interface TrustedStyleString extends TrustedString {\n  '__SANITIZER_TRUSTED_BRAND__': 'Style';\n}\n\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {@link bypassSanitizationTrustScript} and {@link scriptSanitizer}.\n */\nexport interface TrustedScriptString extends TrustedString {\n  '__SANITIZER_TRUSTED_BRAND__': 'Script';\n}\n\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {@link bypassSanitizationTrustUrl} and {@link urlSanitizer}.\n */\nexport interface TrustedUrlString extends TrustedString { '__SANITIZER_TRUSTED_BRAND__': 'Url'; }\n\n/**\n * A branded trusted string used with sanitization of `resourceUrl` strings.\n *\n * See: {@link bypassSanitizationTrustResourceUrl} and {@link resourceUrlSanitizer}.\n */\nexport interface TrustedResourceUrlString extends TrustedString {\n  '__SANITIZER_TRUSTED_BRAND__': 'ResourceUrl';\n}\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nexport function sanitizeHtml(unsafeHtml: any): string {\n  if (unsafeHtml instanceof String && (unsafeHtml as TrustedHtmlString)[BRAND] === 'Html') {\n    return unsafeHtml.toString();\n  }\n  return _sanitizeHtml(document, stringify(unsafeHtml));\n}\n\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nexport function sanitizeStyle(unsafeStyle: any): string {\n  if (unsafeStyle instanceof String && (unsafeStyle as TrustedStyleString)[BRAND] === 'Style') {\n    return unsafeStyle.toString();\n  }\n  return _sanitizeStyle(stringify(unsafeStyle));\n}\n\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nexport function sanitizeUrl(unsafeUrl: any): string {\n  if (unsafeUrl instanceof String && (unsafeUrl as TrustedUrlString)[BRAND] === 'Url') {\n    return unsafeUrl.toString();\n  }\n  return _sanitizeUrl(stringify(unsafeUrl));\n}\n\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nexport function sanitizeResourceUrl(unsafeResourceUrl: any): string {\n  if (unsafeResourceUrl instanceof String &&\n      (unsafeResourceUrl as TrustedResourceUrlString)[BRAND] === 'ResourceUrl') {\n    return unsafeResourceUrl.toString();\n  }\n  throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts`s have been allowed to pass.\n */\nexport function sanitizeScript(unsafeScript: any): string {\n  if (unsafeScript instanceof String && (unsafeScript as TrustedScriptString)[BRAND] === 'Script') {\n    return unsafeScript.toString();\n  }\n  throw new Error('unsafe value used in a script context');\n}\n\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml: string): TrustedHtmlString {\n  return bypassSanitizationTrustString(trustedHtml, 'Html');\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle: string): TrustedStyleString {\n  return bypassSanitizationTrustString(trustedStyle, 'Style');\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript: string): TrustedScriptString {\n  return bypassSanitizationTrustString(trustedScript, 'Script');\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl: string): TrustedUrlString {\n  return bypassSanitizationTrustString(trustedUrl, 'Url');\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl: string):\n    TrustedResourceUrlString {\n  return bypassSanitizationTrustString(trustedResourceUrl, 'ResourceUrl');\n}\n\n\nfunction bypassSanitizationTrustString(trustedString: string, mode: 'Html'): TrustedHtmlString;\nfunction bypassSanitizationTrustString(trustedString: string, mode: 'Style'): TrustedStyleString;\nfunction bypassSanitizationTrustString(trustedString: string, mode: 'Script'): TrustedScriptString;\nfunction bypassSanitizationTrustString(trustedString: string, mode: 'Url'): TrustedUrlString;\nfunction bypassSanitizationTrustString(\n    trustedString: string, mode: 'ResourceUrl'): TrustedResourceUrlString;\nfunction bypassSanitizationTrustString(\n    trustedString: string,\n    mode: 'Html' | 'Style' | 'Script' | 'Url' | 'ResourceUrl'): TrustedString {\n  const trusted = new String(trustedString) as TrustedString;\n  trusted[BRAND] = mode;\n  return trusted;\n}\n"]}