{"version":3,"file":"compiler.js","sourceRoot":"","sources":["../../../../../packages/core/src/linker/compiler.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,UAAU,EAAE,cAAc,EAAiB,MAAM,OAAO,CAAC;;;;;;;AAcjE,MAAM;;;;;IACJ,YACW,iBACA;QADA,oBAAe,GAAf,eAAe;QACf,uBAAkB,GAAlB,kBAAkB;KAA6B;CAC3D;;;;;;;;;;AAGD;IACE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;CACnD;;;;;;;;;;;AAaD,MAAM;;;;;;;;IAKJ,iBAAiB,CAAI,UAAmB,IAAwB,MAAM,WAAW,EAAE,CAAC,EAAE;;;;;;;IAKtF,kBAAkB,CAAI,UAAmB,IAAiC,MAAM,WAAW,EAAE,CAAC,EAAE;;;;;;;IAKhG,iCAAiC,CAAI,UAAmB;QACtD,MAAM,WAAW,EAAE,CAAC;KACrB;;;;;;;IAKD,kCAAkC,CAAI,UAAmB;QAEvD,MAAM,WAAW,EAAE,CAAC;KACrB;;;;;IAKD,UAAU,MAAW;;;;;;IAKrB,aAAa,CAAC,IAAe,KAAI;;;YApClC,UAAU;;;;;;;;;;;;;;;;;;AAyDX,MAAM,CAAC,uBAAM,gBAAgB,GAAG,IAAI,cAAc,CAAoB,iBAAiB,CAAC,CAAC;;;;;;;AAOzF,MAAM;CAEL","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, StaticProvider} from '../di';\nimport {MissingTranslationStrategy} from '../i18n/tokens';\nimport {ViewEncapsulation} from '../metadata';\nimport {Type} from '../type';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n\n\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * @experimental\n */\nexport class ModuleWithComponentFactories<T> {\n  constructor(\n      public ngModuleFactory: NgModuleFactory<T>,\n      public componentFactories: ComponentFactory<any>[]) {}\n}\n\n\nfunction _throwError() {\n  throw new Error(`Runtime compiler is not loaded`);\n}\n\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n * @stable\n */\n@Injectable()\nexport class Compiler {\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components listed\n   * in `entryComponents` have to be inlined.\n   */\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> { throw _throwError(); }\n\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> { throw _throwError(); }\n\n  /**\n   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    throw _throwError();\n  }\n\n  /**\n   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    throw _throwError();\n  }\n\n  /**\n   * Clears all caches.\n   */\n  clearCache(): void {}\n\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type: Type<any>) {}\n}\n\n/**\n * Options for creating a compiler\n *\n * @experimental\n */\nexport type CompilerOptions = {\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: StaticProvider[],\n  missingTranslation?: MissingTranslationStrategy,\n  preserveWhitespaces?: boolean,\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @experimental\n */\nexport const COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>('compilerOptions');\n\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n"]}